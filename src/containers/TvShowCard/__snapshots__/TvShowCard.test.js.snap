// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TvShowCard should return an article with an image, h3, 2 p elements and to match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TvShowCard
    fetchShowInfo={[MockFunction]}
    id={1}
    img="www.img.com"
    network="FOX"
    title="Cake Boss"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Link
          replace={false}
          to="/tvshow/1"
        >
          <div
            className="tv-card-img"
          >
            <img
              alt="series poster"
              className="tv-card-image"
            />
          </div>
        </Link>,
        <h3
          className="tv-card-title"
        >
          Cake Boss
        </h3>,
        <p
          className="tv-card-network"
        >
          Network: 
          FOX
        </p>,
      ],
      "className": "tv-show-card",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": "1",
        "nodeType": "class",
        "props": Object {
          "children": <div
            className="tv-card-img"
          >
            <img
              alt="series poster"
              className="tv-card-image"
            />
          </div>,
          "replace": false,
          "to": "/tvshow/1",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <img
              alt="series poster"
              className="tv-card-image"
            />,
            "className": "tv-card-img",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "alt": "series poster",
              "className": "tv-card-image",
              "src": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": "img",
          },
          "type": "div",
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Cake Boss",
          "className": "tv-card-title",
        },
        "ref": null,
        "rendered": "Cake Boss",
        "type": "h3",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "Network: ",
            "FOX",
          ],
          "className": "tv-card-network",
        },
        "ref": null,
        "rendered": Array [
          "Network: ",
          "FOX",
        ],
        "type": "p",
      },
    ],
    "type": "article",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Link
            replace={false}
            to="/tvshow/1"
          >
            <div
              className="tv-card-img"
            >
              <img
                alt="series poster"
                className="tv-card-image"
              />
            </div>
          </Link>,
          <h3
            className="tv-card-title"
          >
            Cake Boss
          </h3>,
          <p
            className="tv-card-network"
          >
            Network: 
            FOX
          </p>,
        ],
        "className": "tv-show-card",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": "1",
          "nodeType": "class",
          "props": Object {
            "children": <div
              className="tv-card-img"
            >
              <img
                alt="series poster"
                className="tv-card-image"
              />
            </div>,
            "replace": false,
            "to": "/tvshow/1",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <img
                alt="series poster"
                className="tv-card-image"
              />,
              "className": "tv-card-img",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "alt": "series poster",
                "className": "tv-card-image",
                "src": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": "img",
            },
            "type": "div",
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Cake Boss",
            "className": "tv-card-title",
          },
          "ref": null,
          "rendered": "Cake Boss",
          "type": "h3",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "Network: ",
              "FOX",
            ],
            "className": "tv-card-network",
          },
          "ref": null,
          "rendered": Array [
            "Network: ",
            "FOX",
          ],
          "type": "p",
        },
      ],
      "type": "article",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
